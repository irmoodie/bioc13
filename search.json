[
  {
    "objectID": "exercises/01_local_r.html",
    "href": "exercises/01_local_r.html",
    "title": "How to install R and RStudio",
    "section": "",
    "text": "On this page you will find a guide to installing R and RStudio on your own device. This will be straight forward if you are using a Windows, macOS or Linux computer. For other devices (iPads, Android tablets, Chromebooks) it is not as simple. Use the guides below to install R and RStudio on your computer.",
    "crumbs": [
      "Introduction to R",
      "2) Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#why-do-i-need-both",
    "href": "exercises/01_local_r.html#why-do-i-need-both",
    "title": "How to install R and RStudio",
    "section": "Why do I need both?",
    "text": "Why do I need both?\nR is a programming language and software environment specifically designed for statistical computing and graphics.\nRStudio is an integrated development environment (IDE) for R. It provides a user-friendly interface that makes it easier to write, debug, and visualize R code. RStudio includes features such as syntax highlighting, code completion, and tools for plotting, history, and workspace management. While R can be used on its own, RStudio enhances the user experience and productivity by providing a more organized and efficient workflow.\nTo use a car as a metaphor, R is the engine, and RStudio is the steering wheel, pedals, gear shifter, etc. It gives us a much easier way to interface and work with R.\nSo you need to install both. RStudio does nothing without R (like a car without an engine).",
    "crumbs": [
      "Introduction to R",
      "2) Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-install-r",
    "href": "exercises/01_local_r.html#how-to-install-r",
    "title": "How to install R and RStudio",
    "section": "How to install R",
    "text": "How to install R\nTo install R on your local device, you need to know what operating system your computer uses. If you are unsure, ask the teacher. Follow the steps in the appropriate section. If you already have R installed, I suggest you check it is up to date. To do that, open R and type R.version. If your major version is 4, then that should be OK for this course.\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for Windows” link.\nClick on the “base” link to download the base system.\nClick on the “Download R-x.x.x for Windows” link (where x.x.x is the latest version).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install R:\nwinget install -e --id RProject.R\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.project\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for macOS” link.\nClick on the .pkg file link to download the installer for the latest version of R.\n\nIf you have a newer Mac with an Apple silicon CPU (M1, M2, M3, M4, etc), you must download the version specifically for Apple silicon CPU Macs that has arm64 in the package name (e.g. R-4.4.3-arm64.pkg).\nIf you have an older Mac with an Intel CPU (i3, i5, i7, etc), you must download the version specifically for Intel CPU Macs that has x86_64 in the package name (e.g. R-4.4.3-x86_64.pkg).\n\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install r\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nDebian\nRun the following commands in your terminal:\nsudo apt update\nsudo apt install r-base r-base-dev\nFor issues, check the dedicated Debian CRAN R Project website.\n\n\nFedora/Redhat\nsudo dnf install R\nFor issues, check the dedicated Fedora CRAN R Project website.\n\n\nUbuntu\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the repo from CRAN -- lsb_release adjusts to 'noble' or 'jammy' or ... as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n# install R itself\nsudo apt install --no-install-recommends r-base\nFor issues, check the dedicated Ubuntu CRAN R Project website.\n\n\nOther linux distros\nIf you are using a Linux distro other than the ones above, I trust you probably know enough to figure out how to install R yourself. Just be cautious as to the version of R you are installing. For this course, it needs to be &gt;= 4.0. If you have any issues, let the teacher know.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\nThis is a lot more complicated, sorry.\nYou have three options:\n\nBorrow a windows laptop from the IT department. This would be my first recommendation. But if you want to be able to use your own computer, see the next two options.\nTry and install R locally using a linux container. This can work, but only reliably for Chromebooks that use an Intel/AMD CPU (not an ARM CPU). Ask if you are unsure.\nYou use R online instead. This has a few drawbacks depending on the method you use:\n\nYou use webR IDE. This should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost.\nYou use Posit Cloud. The free tier should be enough for everything we do here. The downside is you need an internet connection to use it.\nUsing Google Colab. The free tier should again be enough for everything in this class, however the interface is going to be very different.\n\n\n\nInstalling R locally (via a linux container)\nI suggest you follow this guide carefully (it will take some time). Ask the teacher if you are stuck.\n\n\nUsing webR IDE\nThis is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to run R natively on your device. I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nIn theory you can install R on your device, however you will need to either install a linux container and/or compile everything yourself (complicated and slow). For this reason, I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, I will not provide instructions on how to install it locally (it is just too much work), but you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.",
    "crumbs": [
      "Introduction to R",
      "2) Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-install-rstudio",
    "href": "exercises/01_local_r.html#how-to-install-rstudio",
    "title": "How to install R and RStudio",
    "section": "How to install RStudio",
    "text": "How to install RStudio\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for Windows” link (we have already installed R so can skip step 1 in their guide).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install RStudio:\nwinget install --id=Posit.RStudio -e\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.studio\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for macOS 13+” link (we have already installed R so can skip step 1 in their guide). If you are using a version of macOS that is &lt;13, follow the link on the page to “download a previous version”.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install --cask rstudio\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nIf your distro is automatically detected, click on the “Download RStudio Desktop for XXX” link (we have already installed R so can skip step 1 in their guide). If your distro is not automatically detected, scroll down to the bottom to find a suitable installer.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nVia various package managers\nThe version of RStudio available via some sources is very out-of-date. For this reason, I suggest either being cautious and checking it is actually up-to-date, or just downloading it from the above link.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\n\nIf you have installed R locally using the guide in the previous section, it will also guide you how to install RStudio.\nIf you are using a web version of R, there is no need to do anything else.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to install RStudio on your device.\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nThere is no (simple) way to install RStudio on your device.",
    "crumbs": [
      "Introduction to R",
      "2) Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-use-r-on-your-own-computer",
    "href": "exercises/01_local_r.html#how-to-use-r-on-your-own-computer",
    "title": "How to install R and RStudio",
    "section": "How to use R on your own computer",
    "text": "How to use R on your own computer\nQuite simply, in this course you should never open R, you should always open RStudio.\nCheck that everything has worked by launching RStudio. It should detect your R installation automatically, but if not, a window will open asking you to select it. If R does not appear here, I suggest you restart your computer first.\nYou should be met by a scene that looks like this:\n\n\n\nA screenshot of a new RStudio installation on macOS.",
    "crumbs": [
      "Introduction to R",
      "2) Installation guide"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical inference for Ecologists",
    "section": "",
    "text": "Here you will find all the materials required for the statistics section of BIOC13.\nAll course communication should take place on LU Canvas."
  },
  {
    "objectID": "exercises/02_intro_to_r.html",
    "href": "exercises/02_intro_to_r.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a powerful, open-source programming language specifically designed for statistical computing, data analysis, and visualization. For biologists, it offers an invaluable toolkit to analyse experimental results, manage large datasets (e.g., genomic or ecological data), and create publication-quality graphs. Unlike point-and-click software, R allows you to automate repetitive tasks, ensuring efficiency and reproducibility in your research. Its flexibility and extensive capabilities make it a staple in almost all fields within biology, both in academia and in industries. A huge reason for this is that R is free to use, and as such has a global community continually developing new tools and resources tailored to scientific research.\n\n\nR can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button.",
    "crumbs": [
      "Introduction to R",
      "1) Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#how-do-i-use-r",
    "href": "exercises/02_intro_to_r.html#how-do-i-use-r",
    "title": "Introduction to R",
    "section": "",
    "text": "R can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button.",
    "crumbs": [
      "Introduction to R",
      "1) Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#r-as-a-calculator",
    "href": "exercises/02_intro_to_r.html#r-as-a-calculator",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nR, like most programming languages, can perform arithmetic operations. It follows the order of operations used in mathematics. If you want to review that, you can do so in Chapter 1 of Duthie (2025).\nYou can use the following operators to write equations in R:\n\n+ : Addition\n- : Subtraction\n* : Multiplication\n/ : Division\n^ or ** : Exponentiation\n%% : Modulus (remainder from division)\n%/% : Integer division\n\nUse these to solve the questions below:\nFill in the blank so that the result of the sum is 10. You need to delete the ______ and replace it with a number.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 12.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 81.",
    "crumbs": [
      "Introduction to R",
      "1) Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#programming-concepts",
    "href": "exercises/02_intro_to_r.html#programming-concepts",
    "title": "Introduction to R",
    "section": "Programming concepts",
    "text": "Programming concepts\nWhile it is not required to be an experienced computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. We will cover these first. You do not need to memorise these things.\n\nObjects\nIn R, data can be stored in objects. An object can be thought of as a container that holds data. You can create an object by assigning a value to a name using the assignment operator &lt;-. In the example below, I assign the value 5 to the object x, and the value 10 to the object y. We can then perform maths or other operations using these objects. Calculate the sum of x and y using + on the line below.\n\n\n\n\n\n\n\n\n\nx &lt;- 5\ny &lt;- 10\nx + y\n\n\n\n\nAdd a third object called z and assign it the value 12. Write a math equation that will output the value 24, using x, y, and z only.\n\n\n\n\n\n\n\n\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- 12\n\ny / x * z\n\n\n\n\nObjects can hold any sort of data in R. It could be a single value like in the above example, multiple values, text, a whole dataset, or a plot.\n\n\nData types\nIn R, data can come in various types, and it’s important to understand these types to manipulate and analyse data effectively. Here are some of the most common data types in R:\n\nNumeric: Represents numbers and can be either integers or floating-point numbers. For example, 42 and 3.14 are numeric values.\nCharacter: Represents text or string data. Character values are enclosed in quotes, such as \"Hello, world!\".\nLogical: Represents boolean values, which can be either TRUE or FALSE.\nFactor: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as “Species A” and “Species B” for species ID.\n\n\n\nVectors\nVectors are one of the most basic data structures in R. A vector is a sequence of data elements of the same basic type. We will sometimes directly use vectors in this course, so it will be good to be familiar with them.\n\nCreating Vectors: You can create a vector using the c() function, which stands for “combine” or “concatenate”. For example, here I create 3 vectors, and assign them to different objects:\n\n\n\n\n\n\n\n\n\nAccessing Elements: You can access elements (position) of a vector using square brackets []. For example, to access the second element of character_vector:\n\n\n\n\n\n\n\n\nNote that in R, the first position is [1], not [0] like in some programming languages.\nVector Operations: You can perform operations on vectors. These operations are applied element-wise. For example:\n\n\n\n\n\n\n\n\nNote that every value in the vector gets multiplied and returned.\nVector Length: You can find the length (number of values in it) of a vector using the length() function:\n\n\n\n\n\n\n\n\n\n\nDataframes\nDataframes are like spreadsheets. They have rows and columns, and all columns are the same length. These are the primary way we will represent data in this course.\n\n\n\nspecies\nmass_g\nsex\n\n\n\n\nblue_tit\n9.1\nmale\n\n\nblue_tit\n10.6\nmale\n\n\nsparrow\n27.3\nfemale\n\n\n\nWe will come back to them soon.\n\n\nBoolean and logical operators\nBoolean operators are used to perform logical operations and return boolean values (TRUE or FALSE). We will use them in this course to describe our hypotheses. Here are the most common boolean operators in R:\n\nComparison Operators: These operators compare two values and return a boolean value.\n\n== : Equal to\n!= : Not equal to\n&lt; : Less than\n&gt; : Greater than\n&lt;= : Less than or equal to\n&gt;= : Greater than or equal to\n\n\nFor example, this bit of code should evaluate to TRUE:\n\n\n\n\n\n\n\n\nAnd this should be FALSE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\n100 == 100\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- 48\n\n8 + p == 56\n\n\n\n\n\n\n\n\n\n\n\n\n\nq &lt;- 24\nr &lt;- 88\n\n1q + 65 &gt; r\n\n1\n\nAny number &gt; 64 will work.\n\n\n\n\n\n\nWe can now add in some logical operators:\n\nLogical Operators: These operators are used to combine multiple boolean expressions.\n\n& : Logical AND\n| : Logical OR\n! : Logical NOT\n\n\nFor example, this bit of code should evaluate to TRUE, because both the first part 1 + 3 == 4 and the second part 5 &gt;= 4 is TRUE:\n\n\n\n\n\n\n\n\nWhereas this evaluates to FALSE, because only the first part is TRUE:\n\n\n\n\n\n\n\n\nBut if we change the & to an OR operator |, it evaluates to TRUE because at least one part of it is TRUE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\nfruit_a &lt;- \"apple\"\nfruit_b &lt;- \"banana\"\n\n1(fruit_a != fruit_b) & (1.5 &gt; 1.2)\n\n1\n\nOR | would also work here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfruit_a &lt;- \"apple\"\nfruit_b &lt;- \"banana\"\n\n(fruit_a == fruit_a) | (35 + 12 &gt; 47)\n\n\n\n\n\n\nFunctions\nFunctions perform tasks in R. Functions can take inputs, called arguments, and return outputs. We put the arguments inside the brackets. For example, in R there is a function called mean(). This function’s first argument x should be a vector of numeric data. The function then outputs the mean as a single numeric value. For example, here we assign a vector of tree heights (cm) to an object called trees. We then calculate the mean tree height using the mean() function.\n\n\n\n\n\n\n\n\nNote that if we are going to supply arguments in the order that the function expects them, we do not have to tell the function which object is for each argument. Since mean() expects the first argument to be the vector you want the mean of, we can also write:\n\n\n\n\n\n\n\n\nTo find out what a function can do, and its arguments, use can write ?function_name, and the R helpfile will be returned for that function (e.g., ?mean). These helpfiles can be confusing at first, but the more you use R, the more they will make sense.\nWe will work with functions a lot in this course, so don’t worry if it still seems confusing.\n\n\nPipes\nOne of the final concepts I will introduce is the pipe operator |&gt;. Note that you will often see it written as %&gt;% when searching online. This is for historical reasons (R by default did not have a pipe operator until recently, so people had made their own). |&gt; comes with R by default now, while %&gt;% requires you to load a package called magrittr first (we will cover packages soon).\nPipes allow you to write code in a way that often makes more sense to people, especially non-programmers. To explain, here’s an example. Note that this is not real code, so you cannot run it.\nSay I wanted to run 3 different functions on a dataframe called my_data. The functions are function_1(), function_2(), and function_3(). Imagine function_1() first transforms my data into the right scale, function_2() then performs a statistical test, and function_3() then makes a plot (again, these are not real functions, just for the example).\nI could write that in a few ways. The first way would look like this:\n\n1my_data_1 &lt;- function_1(my_data)\n2my_data_2 &lt;- function_2(my_data_1)\n3my_data_final &lt;- function_3(my_data_2)\n\n\n1\n\nThe original data, my_data, is passed to function_1(), and the result is stored in my_data_1.\n\n2\n\nThe transformed data, my_data_1, is then passed to function_2(), and the result is stored in my_data_2.\n\n3\n\nFinally, the data from my_data_2 is passed to function_3(), and the result is stored in my_data_final.\n\n\n\n\nWhile this method is quite clear to read, it creates a lot of objects that we might not want to do anything with. This is not a huge issue, but could become one if you are working with very large data sets.\nWe could also write it like this:\n\nmy_data_final &lt;- function_3(function_2(function_1(my_data)))\n\nWe can wrap functions within functions to put this whole operation on one line. This gets rid of those extra objects, having only a my_data_final as the output. However, the order in which the functions are written no longer matches the order in which they are run. In the above example, function_1() runs first, then function_2(), then function_3(). But they are written in reverse order when we read it left to right.\nA final method of writing this makes use of pipes |&gt;, and has the best of both approaches:\n\nmy_data_final &lt;- my_data |&gt; function_1() |&gt; function_2() |&gt; function_3()\n\nPipes also allow us to spread our code over multiple lines, and the |&gt; will look for the next bit of code on the next line if nothing comes after it:\n\nmy_data_final &lt;- \n  my_data |&gt; \n  function_1() |&gt; \n  function_2() |&gt; \n  function_3()\n\nAll the above examples have the same my_data_final output, but are just written in different ways. The computer reads them all identically, so the main benefit is how readable your code is.\nIn this course, we will use pipes extensively, along with a set of packages that are designed for this kind of workflow. Below, rewrite the examples to use pipes. You can check the solutions tab to see if you are on the right track:\n\n\n\n\n\n\n\n\n\n1trees |&gt; mean()\n\n1\n\nTake the trees vector, and then pipe|&gt; it into the mean() function.\n\n\n\nThe log() function performs a natural logarithm transformation of the data.\n\n\n\n\n\n\n\n\n\n1trees |&gt;\n  log() |&gt;\n  mean() \n\n1\n\nTake the trees vector, and then pipe|&gt; it into the log() function, then into the mean() function.\n\n\n\n\n\nPackages\nAn R package is a set of functions, data and/or information that someone else has written, that you can first load, then use in your own R code. Packages are written by other R users, and distributed for free via repositories, like The Comprehensive R Archive Network (CRAN).\nR packages are often used to save you time. While all the functions in an R package are written with R, and you could write them again yourself, why bother? If someone else has done it already and shared it, fantastic! In this course, we are going to use two package “families”. They are tidyverse and tidymodels. Note that both start with tidy. Remember from the lecture, that tidy refers to a particular format of data, and these packages all assume your data will be in the format, and will always return data in that format. They are also all built with pipes in mind, and are designed to make complex programming tasks (especially those performed by data scientists, of which biology fits in well) very easy. We will cover these packages in detail soon, but know to use them you need to do two things:\n\nInstall the package. This needs to be done once on your computer, using the install.packages() command. For examples:\n\n\ninstall.packages(\"ggplot2\")\n\nThis will install ggplot2, a package for plotting data. It will install it from CRAN by default, and probably (assuming you are in Sweden) will be downloaded from a server in Umeå.\n\nWe now need to load the package, so that we can access it while we write code. To do that, we use the library() function.\n\n\n1library(ggplot2)\n\n\n1\n\nNote that we no longer require the \" around the package name. But the function would still work if you did include them.\n\n\n\n\nBelow I have written some code that makes a plot using an inbuilt R dataset called iris using the package ggplot2. But if you try to run it, you will get an error. The ggplot2 package has already been installed, so fix the code by loading the ggplot2 package before the code that makes the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n1library(ggplot2)\niris |&gt;\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n1\n\nMake sure to load the ggplot2 package before the ggplot() function. Code is always executed top to bottom.\n\n\n\nThat was a lot of concepts in a very short amount of time! Take a well deserved break before the next exercise.",
    "crumbs": [
      "Introduction to R",
      "1) Getting familiar with R"
    ]
  }
]