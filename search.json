[
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Additional resources",
    "section": "",
    "text": "In this section of the course, we have been using an R package called infer to perform randomisation and resampling based statisitcs. Since we have only had two days, we have not had a chance to go through examples of every sort of analysis you might want to do. However, the framework you have been using for calculating confidence intervals and hypothesis testing can be applied extrememly broadly, and you can likely use them to answer any ecological question you come up with on this course.\nBelow I have linked you to some materials which should help with that.\n\n\nHelp with implementing your statistical methods\n\nThe getting to know infer vignette\nThis contains a walk through of some examples using infer with commentary, explaining things in detail.\nThe full infer pipeline examples vignette\n\nThis contains examples of almost every possible analysis with infer, but with limited commentary. If you know what you want to do, but can’t quite make it work, check this page.\n\nThere are also other articles on the infer website that contain helpful examples.\n\n\n\nHelp with understanding the statistical methods\n\nThe Statistical Inference with infer section of ModernDive (Ch. 7-10) is a beginner friendly text that follows the style of statistical analysis we have been doing in this part of the course.\n\n\n\nHelp with general working with data in R\n\nFor help with importing, data handling and basic plotting, the Data Science with tidyverse section of ModernDive is a beginner friendly text that will have examples for most things you will want to do.\n\nIf something is not covered, check out R for Data Science.\n\n\n\n\n\nAdvice for using AI tools to generate code\nAI tools (ChatGPT, Gemini, Deepseek, etc) are going to be both extremely helpful and extremely confusing if you prompt them to provide code. For the output to be more helpful considering what we have covered in this section, at the end of your question, paste the following text:\n\nUse the tidyverse package and style of coding. Use the base R pipe. Use the infer package for all statistics, and use resampling and/or randomisation approaches.\n\nFor example, if I prompt ChatGPT with:\n\nHow do I do an anova in R?\n\nI get this: https://chatgpt.com/share/68da6440-b3e4-8009-875a-c268999f45be\nBut if I add the prompt text above and instead use:\n\nHow do I do an anova in R? Use the tidyverse package and style of coding. Use the base R pipe. Use the infer package for all statistics, and use resampling and/or randomisation approaches.\n\nI get this: https://chatgpt.com/share/68da6458-4184-8009-8889-448b68f72ed5\nThe second answer is much more helpful for this course.\nFor general statistics help, include the terms “randomisation based inference” or “resampling based inference” or “computational statistics”. These are the methods we have covered here, as opposed to more mathematical based inference methods.",
    "crumbs": [
      "Help beyond the exercises",
      "Useful resources"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html",
    "href": "exercises/04_statistics.html",
    "title": "Computational methods of inference",
    "section": "",
    "text": "Each time you start a new exercise, you should:\n\nMake a new folder in your course folder for the exercise (e.g. bioc13/exercise_2)\nOpen RStudio\n\nIf you haven’t closed RStudio since the last exercise, I recommend you close it and then re-open it. If it asks if you want to save your R Session data, choose no.\n\nSet your working directory by going to Session -&gt; Set working directory -&gt; Choose directory, then navigate to the folder you just made for this exercise.\nCreate a new Rmarkdown document (File -&gt; New file -&gt; R markdown..). Give it a clear title.\n\nPlease ensure you have followed the step above before you start!",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#loading-r-packages",
    "href": "exercises/04_statistics.html#loading-r-packages",
    "title": "Computational methods of inference",
    "section": "Loading R packages",
    "text": "Loading R packages\nIf you installed the R packages from the last session, you do not need to reinstall them, only load them into our current R environment. We use the library() function to do that. Since we need this code to run every time we come back to this RMarkdown document, we should write it in the document. R code should always be executed “top to bottom”, so this bit of code should come right at the start.\nMake a code cell and use the library() function to load the tidyverse and infer packages:\n\nlibrary(tidyverse)\nlibrary(infer)",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#loading-your-data",
    "href": "exercises/04_statistics.html#loading-your-data",
    "title": "Computational methods of inference",
    "section": "Loading your data",
    "text": "Loading your data\nWe will now load the crop_growth.csv data file that you downloaded earlier.\nMake another code cell. Load the crop_growth.csv data file using the read_csv() function and assign it to an object named crop_data.\n\n1crop_data &lt;- read_csv(\"crop_growth.csv\")\n\n\n1\n\nBe sure to use quote marks around the file name.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#explore-the-data",
    "href": "exercises/04_statistics.html#explore-the-data",
    "title": "Computational methods of inference",
    "section": "Explore the data",
    "text": "Explore the data\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nHow many rows of data are in the dataset?\nWhat is the unit of observation in this dataset? In other words, what does each row represent?\nWhat populations (statistical use of the word) could we make inferences about using this data?\nWhat is the minimum and maximum dry_mass_g the researchers recorded?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#plot-the-data",
    "href": "exercises/04_statistics.html#plot-the-data",
    "title": "Computational methods of inference",
    "section": "Plot the data",
    "text": "Plot the data\nBelow I have provided you with the base ggplot() function, but you need to add a geom_ to it.\n\ncrop_data |&gt;\n1  ggplot(aes(x = treatment, y = dry_mass_g))\n\n\n1\n\nTo add some geometry add a + to the end of this line, then copy the geom_ onto the next line\n\n\n\n\nSome examples geometries could be:\n\ngeom_boxplot()\n\n\ngeom_violin()\n\n\ngeom_jitter(width = 0.1)\n\nTry them out. You can also add more than one geom_ to a plot.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-the-observed-statistic",
    "href": "exercises/04_statistics.html#calculating-the-observed-statistic",
    "title": "Computational methods of inference",
    "section": "Calculating the observed statistic",
    "text": "Calculating the observed statistic\nOur research question is:\n\nIs there a difference in mean dry_mass_g between treatment groups?\n\nSince we have more than two groups, this sort of analysis is called an ANOVA (ANalysis Of VAriance). Specifically, it is a one-way ANOVA, as we are interested in the effect of one categorical variable (with &gt;2 groups) on a continuous variable.\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nState the null and alternative hypothesis.\nWhat is the test statistic we use in an ANOVA?\n\nIn a new code cell, calculate the observed test statistic\n\n\n\n\n\n\nCode hint\n\n\n\n\n\n\nobs_stat &lt;-\n1  ______ |&gt;\n2  specify(response = ______, explanatory = ______) |&gt;\n3  calculate(stat = \"______\")\n\n4obs_stat\n\n\n1\n\nThe name of the dataset.\n\n2\n\nSpecify which is your response and explanatory variable.\n\n3\n\nCalculate the observed statistic. To see the possible names you can use, write ?calculate to open the help files for that function.\n\n4\n\nPrint the observe statistic to the console.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-confidence-intervals",
    "href": "exercises/04_statistics.html#calculating-confidence-intervals",
    "title": "Computational methods of inference",
    "section": "Calculating confidence intervals",
    "text": "Calculating confidence intervals\n\n\n\nA general approach to bootstrapping confidence intervals\n\n\nThere is absolutely nothing stopping you from calculating a cofidence interval for the statistic used in an ANOVA (try it if you want using code from the previous exercise), but in practise they can be hard to interpret. So for now, we will move straight to testing the null-hypothesis.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#testing-against-the-null-hypothesis",
    "href": "exercises/04_statistics.html#testing-against-the-null-hypothesis",
    "title": "Computational methods of inference",
    "section": "Testing against the null hypothesis",
    "text": "Testing against the null hypothesis\n\n\n\nA general approach to hypothesis testing\n\n\n\nGenerating a null distribution\nIn a new code cell, generate a null distribution using the code below:\n\nnull_dist &lt;-\n1  ______ |&gt;\n2  specify(response = ______, explanatory = ______) |&gt;\n3  hypothesize(null = \"independence\") |&gt;\n4  generate(reps = 10000, type = \"permute\") |&gt;\n5  calculate(stat = \"______\")\n\n\n1\n\nThe name of the dataset.\n\n2\n\nSpecify which is your response and explanatory variable.\n\n3\n\nOur hypothesis is that our response variable is independant of our explanatory variable.\n\n4\n\nSimulate data using permuations. This may take a few seconds to minutes depending on your computer.\n\n5\n\nFrom each of our simulated permutation samples, calculate the test statistic.\n\n\n\n\n\n\nCompare your observed against the null\nIn a new code cell, plot the null distribution and the observed statistic using the code below:\n\nnull_dist |&gt;\n1  visualise(bins = 15) +\n2  shade_p_value(obs_stat = obs_stat, direction = \"greater\") +\n3  labs(x = \"______ statistic\")\n\n\n1\n\nPipe your null_dist object into visualise(). You can change the number of bins if you wish.\n\n2\n\nPlot your observed_stat, and specify that the direction should be greater. Our statistic is naturally bounded at 0.\n\n3\n\nYou can change the axis labels to make the plot more clear.\n\n\n\n\n\n\nCalculate a p-value\nIn a new code cell, use your null distribution to calculate a p-value:\n\nnull_dist |&gt;\n  get_p_value(obs_stat = obs_stat, direction = \"greater\")",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#writing-your-conclusions",
    "href": "exercises/04_statistics.html#writing-your-conclusions",
    "title": "Computational methods of inference",
    "section": "Writing your conclusions",
    "text": "Writing your conclusions\nIn your RMarkdown document, using text below the code cell, answer the following question:\nWhat are your conclusions? State them both clearly in terms of the research question and null hypothesis. How would you describe them to someone who does not know much about statistics?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#loading-the-data",
    "href": "exercises/04_statistics.html#loading-the-data",
    "title": "Computational methods of inference",
    "section": "Loading the data",
    "text": "Loading the data\nDownload the data file. Once downloaded, you should move it to your working directory folder for this exercise before continuing.\nMake another code cell. Load the poll_results.csv data file using the read_csv() function and assign it to an object named crop_data.\n\n1poll_data &lt;- read_csv(\"poll_results.csv\")\n\n\n1\n\nBe sure to use quote marks around the file name.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#explore-the-data-1",
    "href": "exercises/04_statistics.html#explore-the-data-1",
    "title": "Computational methods of inference",
    "section": "Explore the data",
    "text": "Explore the data\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nHow many rows of data are in the dataset?\nWhat is the unit of observation in this dataset? In other words, what does each row represent?\nWhat populations (statistical use of the word) could we make inferences about using this data?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#plot-the-data-1",
    "href": "exercises/04_statistics.html#plot-the-data-1",
    "title": "Computational methods of inference",
    "section": "Plot the data",
    "text": "Plot the data\nTry and figure out how you would use ggplot() and geom_bar() to plot this dataset. Use any resources you like!",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-the-observed-statistic-1",
    "href": "exercises/04_statistics.html#calculating-the-observed-statistic-1",
    "title": "Computational methods of inference",
    "section": "Calculating the observed statistic",
    "text": "Calculating the observed statistic\nThe research question is:\n\nHas public opinion changed since the last election?\n\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nState the null and alternative hypothesis.\nUse the slides to help you decide what statistic would help you answer this question. What test statistic will you use? Why?\n\nIn a new code cell, calculate the observed test statistic\n\nobs_stat &lt;- \n1  _____ |&gt;\n2  specify(response = _____) |&gt;\n  hypothesize(\n3    null = \"point\",\n    p = c(\n4      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______\n    )\n   ) |&gt;\n5  calculate(stat = \"______\")\n\n6obs_stat\n\n\n1\n\nThe name of the dataset.\n\n2\n\nSpecify which is your response variable.\n\n3\n\nThe specific test statistic we want to use requires us to provide our null hypothesis. In this example, we want to know if the proportion of each group in the response variable is different from a hypothesised proportion, so we use point.\n\n4\n\nHere we need to put in our expected or hypothesised proportions under the null hypothesis.\n\n5\n\nCalculate the observed statistic. To see the possible names you can use, write ?calculate to open the help files for that function.\n\n6\n\nPrint the observe statistic to the console.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-confidence-intervals-1",
    "href": "exercises/04_statistics.html#calculating-confidence-intervals-1",
    "title": "Computational methods of inference",
    "section": "Calculating confidence intervals",
    "text": "Calculating confidence intervals\nAgain, there is absolutely nothing stopping you from calculating a confidence interval for the statistic you used (try it if you want using code from the previous exercise), but in practise they can be hard to interpret. So for now, we will move straight to testing the null-hypothesis.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#testing-against-the-null-hypothesis-1",
    "href": "exercises/04_statistics.html#testing-against-the-null-hypothesis-1",
    "title": "Computational methods of inference",
    "section": "Testing against the null hypothesis",
    "text": "Testing against the null hypothesis\n\n\n\nA general approach to hypothesis testing\n\n\n\nGenerating a null distribution\nIn a new code cell, generate a null distribution using \"draw\" and the code below:\n\nnull_dist &lt;-\n1  _____ |&gt;\n2  specify(response = _____) |&gt;\n  hypothesize(\n3    null = \"point\",\n    p = c(\n4      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______,\n      \"______\" = ______\n    )\n   ) |&gt;\n5   generate(reps = 10000, type = \"draw\") |&gt;\n6  calculate(stat = \"______\")\n\n\n1\n\nThe name of the dataset.\n\n2\n\nSpecify your response variable.\n\n3\n\nIn this example, we want to know if the proportion of each group in the response variable is different from a hypothesised proportion, so we use point.\n\n4\n\nHere we need to put in our expected or hypothesised proportions under the null hypothesis.\n\n5\n\nSimulate data using draw\n\n6\n\nFrom each of our simulated samples, calculate the test statistic.\n\n\n\n\n\n\nCompare your observed against the null\nIn a new code cell, plot the null distribution and the observed statistic using the code below:\n\nnull_dist |&gt;\n1  visualise(bins = 15) +\n2  shade_p_value(obs_stat = obs_stat, direction = \"greater\") +\n3  labs(x = \"______ statistic\")\n\n\n1\n\nPipe your null_dist object into visualise(). You can change the number of bins if you wish.\n\n2\n\nPlot your observed_stat, and specify that the direction should be greater. Our statistic is naturally bounded at 0.\n\n3\n\nYou can change the axis labels to make the plot more clear.\n\n\n\n\n\n\nCalculate a p-value\nIn a new code cell, use your null distribution to calculate a p-value:\n\nnull_dist |&gt;\n  get_p_value(obs_stat = obs_stat, direction = \"greater\")",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#writing-your-conclusions-1",
    "href": "exercises/04_statistics.html#writing-your-conclusions-1",
    "title": "Computational methods of inference",
    "section": "Writing your conclusions",
    "text": "Writing your conclusions\nIn your RMarkdown document, using text below the code cell, answer the following question:\nWhat are your conclusions? State them both clearly in terms of the research question and null hypothesis. How would you describe them to someone who does not know much about statistics?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#loading-the-data-1",
    "href": "exercises/04_statistics.html#loading-the-data-1",
    "title": "Computational methods of inference",
    "section": "Loading the data",
    "text": "Loading the data\nDownload the data file. Once downloaded, you should move it to your working directory folder for this exercise before continuing.\nMake another code cell. Load the pie_crab.csv data file using the read_csv() function and assign it to an object named pie_crab.\n\n1pie_crab &lt;- read_csv(\"pie_crab.csv\")\n\n\n1\n\nBe sure to use quote marks around the file name.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#explore-the-data-2",
    "href": "exercises/04_statistics.html#explore-the-data-2",
    "title": "Computational methods of inference",
    "section": "Explore the data",
    "text": "Explore the data\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nHow many rows of data are in the dataset?\nWhat is the unit of observation in this dataset? In other words, what does each row represent?\nWhat populations (statistical use of the word) could we make inferences about using this data?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#plot-the-data-2",
    "href": "exercises/04_statistics.html#plot-the-data-2",
    "title": "Computational methods of inference",
    "section": "Plot the data",
    "text": "Plot the data\nTry and figure out how you would use ggplot() and geom_point() to plot latitude and size in this dataset. Use any resources you like!",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-the-observed-statistic-2",
    "href": "exercises/04_statistics.html#calculating-the-observed-statistic-2",
    "title": "Computational methods of inference",
    "section": "Calculating the observed statistic",
    "text": "Calculating the observed statistic\nThe research question is:\n\nDoes Minuca pugnax follow Bergmann’s rule?\n\nIn your RMarkdown document, using text below the code cell, answer the following questions:\n\nState the null and alternative hypothesis.\nUse the slides to help you decide what statistic would help you answer this question. What test statistic will you use? Why?\n\nIn a new code cell, calculate the observed test statistic\n\nobs_stat &lt;-\n1  ______ |&gt;\n2  specify(______ ~ ______) |&gt;\n3  calculate(stat = \"______\")\n\n4obs_stat\n\n\n1\n\nThe name of the dataset.\n\n2\n\nA formula in the form of dependant ~ independant\n\n3\n\nCalculate the observed statistic.\n\n4\n\nPrint the observe statistic to the console.",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#calculating-confidence-intervals-2",
    "href": "exercises/04_statistics.html#calculating-confidence-intervals-2",
    "title": "Computational methods of inference",
    "section": "Calculating confidence intervals",
    "text": "Calculating confidence intervals\n\n\n\nA general approach to bootstrapping confidence intervals\n\n\nThis statistic lends itself well to interpretable confidence intervals.\nIn a new code cell, calculate the 95% CI for the test statistic\n\n______ &lt;-\n1  ______ |&gt;\n2  specify(______ ~ ______) |&gt;\n3  generate(reps = ______, type = \"______\") |&gt;\n4  calculate(stat = \"______\")\n\n5percentile_ci &lt;- get_ci(______, type = \"______\", level = ______)\n\n6percentile_ci\n\n\n1\n\nThe name of the dataset.\n\n2\n\nA formula in the form of dependant ~ independant (order does not matter for a correlation)\n\n3\n\nDecide how you will generate a datasets to use in your sampling distribution.\n\n4\n\nCalculate the statistic for each sample to make a sampling distribution.\n\n5\n\nUse your sampling distribution object to calculate the confidence internals\n\n6\n\nPrint the CI",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#testing-against-the-null-hypothesis-2",
    "href": "exercises/04_statistics.html#testing-against-the-null-hypothesis-2",
    "title": "Computational methods of inference",
    "section": "Testing against the null hypothesis",
    "text": "Testing against the null hypothesis\n\n\n\nA general approach to hypothesis testing\n\n\n\nGenerating a null distribution\nIn a new code cell, generate a null distribution using the code below:\n\n______ &lt;-\n1  ______ |&gt;\n2  specify(______ ~ ______) |&gt;\n3  hypothesize(null = \"______\") |&gt;\n4  generate(reps = ______, type = \"______\") |&gt;\n5  calculate(stat = \"______\")\n\n\n1\n\nThe name of the dataset.\n\n2\n\nA formula in the form of dependant ~ independant (order does not matter for a correlation)\n\n3\n\nWhat is your null hypothesis?\n\n4\n\nDecide how you will generate a datasets under your null hypothesis to use in your null distribution.\n\n5\n\nCalculate the statistic for each sample to make a sampling distribution.\n\n\n\n\n\n\nCompare your observed against the null\nIn a new code cell, plot the null distribution and the observed statistic using the code below:\n\n______ |&gt;\n  visualise() +\n  shade_p_value(obs_stat = ______, direction = \"______\") +\n  labs(x = \"______\")\n\n\n\nCalculate a p-value\nIn a new code cell, use your null distribution to calculate a p-value:\n\n______ |&gt;\n  get_p_value(obs_stat = ______, direction = \"______\")",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/04_statistics.html#writing-your-conclusions-2",
    "href": "exercises/04_statistics.html#writing-your-conclusions-2",
    "title": "Computational methods of inference",
    "section": "Writing your conclusions",
    "text": "Writing your conclusions\nIn your RMarkdown document, using text below the code cell, answer the following question:\nWhat are your conclusions? State them both clearly in terms of the research question and null hypothesis. How would you describe them to someone who does not know much about statistics?",
    "crumbs": [
      "Computational statistics (Day 2)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference_extra.html",
    "href": "exercises/03_inference_extra.html",
    "title": "Exercise 1: Bonus problems",
    "section": "",
    "text": "All the exercises below use the tephritis_phenotype.csv dataset from the main exercise. This exercise is not mandatory, but will allow you to practise what we covered in the first exercise.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises (extra)"
    ]
  },
  {
    "objectID": "exercises/03_inference_extra.html#the-grammer-of-graphics",
    "href": "exercises/03_inference_extra.html#the-grammer-of-graphics",
    "title": "Exercise 1: Bonus problems",
    "section": "The grammer of graphics",
    "text": "The grammer of graphics\nThe grammer of graphics gives us a way to describe any plot.\nA ggplot2 plot has three essential components:\n\ndata: the dataset that contains the variables you want to plot\ngeom: the geometric object you want to use to display your data:\n\ngeom_point()\ngeom_jitter()\ngeom_boxplot()\ngeom_violin()\ngeom_bar()\ngeom_col()\n\naes: aesthetic attributes that you want to map to your geometric object:\n\nx\ny\nfill\ncolour\nshape\nsize\n\n\nggplot2 uses a layered approach to the grammer of graphics. This makes it easy to start contructing plots by putting together a “recipe” step-by-step.\nTo find out what a function does do, try using them, or search the helpfiles in the Outputs panel. You can also, for any function, search for the helpfile by writing ?function_name. E.g., if you wanted to know what geom_jitter() does, you could run the command ?geom_jitter, and the helpfile will open.\nYou can also consult the ggplot2 “cheatsheet” for help.\nggplot2 allows for extensive customisation of your plots. For example, you might want to change the labels of the axis, or give your plot a title. You can do that using the labs() function:\n\nggplot(example_data, aes(x = variable_1, y = variable_2)) +\ngeom_points() +\nlabs(x = \"Name of my x variable\", y = \"Name of my Y variable\", title = \"My awesome plot\")\n\nYou can also change the theme of your plot. ggplot2 has many built in themes. A full list can be found here. For my fake example, I could change the theme to theme_classic() like this:\n\nggplot(example_data, aes(x = variable_1, y = variable_2)) +\ngeom_points() +\ntheme_classic()\n\nTry it out on your plots. What theme do you prefer best?\nIn general, ggplot2 is a very widely used plotting package, so finding examples of what you want to do will not be hard. Use search engines, AI tools, the ggplot2 book, etc. If you see it on your plot, you can probably change it.\n\n\n\n\n\n\nProblems\n\n\n\n\nMake a graph that shows the variable body_length_mm for each sex using a box plot.\nMake a graph that shows the relationship between body_length_mm and wing_length_mm. Change the colour to show sex.\nMake a graph that uses violin plots to show melanized_percent for each region.\nUse a bar chart to show the number of flies from each side of the baltic. Split each bar by host_plant.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises (extra)"
    ]
  },
  {
    "objectID": "exercises/03_inference_extra.html#statistics",
    "href": "exercises/03_inference_extra.html#statistics",
    "title": "Exercise 1: Bonus problems",
    "section": "Statistics",
    "text": "Statistics\nUse what we covered in the lecture, exercise and the help files to investigate the following questions:\n\n\n\n\n\n\nResearch questions\n\n\n\n\nIn many insect species, females are on average larger than males. Is this also the case in Tephritis conura? Use a null hypothesis test to answer this question.\nIs there a difference in the amount of melanization on the wings between the two host races?\nIs there a difference in the proportion of flies that utilize the Cirsium heterophyllum host plant on each side of the Baltic sea?",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises (extra)"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical inference for Ecologists",
    "section": "",
    "text": "Here you will find all the materials required for the statistics section of BIOC13.\nAll course communication should take place on LU Canvas.\nFor access to materials from previous semesters, see the releases on GitHub."
  },
  {
    "objectID": "exercises/01_local_r.html",
    "href": "exercises/01_local_r.html",
    "title": "How to install R and RStudio",
    "section": "",
    "text": "On this page you will find a guide to installing R and RStudio on your own device. This will be straight forward if you are using a Windows, macOS or Linux computer. For other devices (iPads, Android tablets, Chromebooks) it is not as simple. Use the guides below to install R and RStudio on your computer.",
    "crumbs": [
      "Introduction to R",
      "Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#why-do-i-need-both",
    "href": "exercises/01_local_r.html#why-do-i-need-both",
    "title": "How to install R and RStudio",
    "section": "Why do I need both?",
    "text": "Why do I need both?\nR is a programming language and software environment specifically designed for statistical computing and graphics.\nRStudio is an integrated development environment (IDE) for R. It provides a user-friendly interface that makes it easier to write, debug, and visualize R code. RStudio includes features such as syntax highlighting, code completion, and tools for plotting, history, and workspace management. While R can be used on its own, RStudio enhances the user experience and productivity by providing a more organized and efficient workflow.\nTo use a car as a metaphor, R is the engine, and RStudio is the steering wheel, pedals, gear shifter, etc. It gives us a much easier way to interface and work with R.\nSo you need to install both. RStudio does nothing without R (like a car without an engine).",
    "crumbs": [
      "Introduction to R",
      "Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-install-r",
    "href": "exercises/01_local_r.html#how-to-install-r",
    "title": "How to install R and RStudio",
    "section": "How to install R",
    "text": "How to install R\nTo install R on your local device, you need to know what operating system your computer uses. If you are unsure, ask the teacher. Follow the steps in the appropriate section. If you already have R installed, I suggest you check it is up to date. To do that, open R and type R.version. If your major version is 4, then that should be OK for this course.\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for Windows” link.\nClick on the “base” link to download the base system.\nClick on the “Download R-x.x.x for Windows” link (where x.x.x is the latest version).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install R:\nwinget install -e --id RProject.R\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.project\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the CRAN R Project website.\nClick on the “Download R for macOS” link.\nClick on the .pkg file link to download the installer for the latest version of R.\n\nIf you have a newer Mac with an Apple silicon CPU (M1, M2, M3, M4, etc), you must download the version specifically for Apple silicon CPU Macs that has arm64 in the package name (e.g. R-4.4.3-arm64.pkg).\nIf you have an older Mac with an Intel CPU (i3, i5, i7, etc), you must download the version specifically for Intel CPU Macs that has x86_64 in the package name (e.g. R-4.4.3-x86_64.pkg).\n\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install r\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nDebian\nRun the following commands in your terminal:\nsudo apt update\nsudo apt install r-base r-base-dev\nFor issues, check the dedicated Debian CRAN R Project website.\n\n\nFedora/Redhat\nsudo dnf install R\nFor issues, check the dedicated Fedora CRAN R Project website.\n\n\nUbuntu\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the repo from CRAN -- lsb_release adjusts to 'noble' or 'jammy' or ... as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n# install R itself\nsudo apt install --no-install-recommends r-base\nFor issues, check the dedicated Ubuntu CRAN R Project website.\n\n\nOther linux distros\nIf you are using a Linux distro other than the ones above, I trust you probably know enough to figure out how to install R yourself. Just be cautious as to the version of R you are installing. For this course, it needs to be &gt;= 4.0. If you have any issues, let the teacher know.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\nThis is a lot more complicated, sorry.\nYou have three options:\n\nBorrow a windows laptop from the IT department. This would be my first recommendation. But if you want to be able to use your own computer, see the next two options.\nTry and install R locally using a linux container. This can work, but only reliably for Chromebooks that use an Intel/AMD CPU (not an ARM CPU). Ask if you are unsure.\nYou use R online instead. This has a few drawbacks depending on the method you use:\n\nYou use webR IDE. This should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost.\nYou use Posit Cloud. The free tier should be enough for everything we do here. The downside is you need an internet connection to use it.\nUsing Google Colab. The free tier should again be enough for everything in this class, however the interface is going to be very different.\n\n\n\nInstalling R locally (via a linux container)\nI suggest you follow this guide carefully (it will take some time). Ask the teacher if you are stuck.\n\n\nUsing webR IDE\nThis is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to run R natively on your device. I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nIn theory you can install R on your device, however you will need to either install a linux container and/or compile everything yourself (complicated and slow). For this reason, I strongly suggest you borrow a laptop from the IT department. If you really want to try using your own device, I will not provide instructions on how to install it locally (it is just too much work), but you can access R online. Here are a few options:\n\nUsing webR IDE\nThis should work for everything we do in the class, but if you accidentally refresh your page or close your browser without saving your work locally, it will be lost. It is a “proof-of-concept” tool, and is not actually intended to be used for real data analysis. However, it is very functional, and we can use it for almost everything in this class. The place where things will be different is when it comes to making Rmarkdown files. This is not supported, but you can still write R scripts with comments, which is fine. You can find it here. However, I would really suggest just using a borrowed laptop over this option.\n\n\nUsing Posit Cloud\nPosit are the company that make RStudio, and they offer a version of it online that works almost identically to the desktop version. All your computations are performed on Posit servers, and with the free plan, you are limited with how much compute time you can use per month. However, the default should be enough for this course. However, I would really suggest just using a borrowed laptop over this option. If you want to use it, you can find it here.\n\n\nGoogle Colab\nColab uses Jupyter to run R code. It is a bit different to the RStudio interface. I personally find that Colab can be very frustrating if you are not a paying user, as you often have to “queue” for a CPU for your code to run on. If you really want to use this (if you are familiar with python/jupyter it might be very intuative), here is a guide to setup R with Colab, and here is a link to Colab itself. However, I would really suggest just using a borrowed laptop over this option.",
    "crumbs": [
      "Introduction to R",
      "Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-install-rstudio",
    "href": "exercises/01_local_r.html#how-to-install-rstudio",
    "title": "How to install R and RStudio",
    "section": "How to install RStudio",
    "text": "How to install RStudio\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for Windows” link (we have already installed R so can skip step 1 in their guide).\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nWinget\nIf you use the package manager winget, you can run the following command to install RStudio:\nwinget install --id=Posit.RStudio -e\n\n\nChocolatey\nIf you use the package manager chocolatey, you can run the following command to install R:\nchoco install r.studio\n\n\n\n\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nScroll down and click on the “Download RStudio Desktop for macOS 13+” link (we have already installed R so can skip step 1 in their guide). If you are using a version of macOS that is &lt;13, follow the link on the page to “download a previous version”.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nHomebrew\nIf you use homebrew, you can install R and dependencies via:\nbrew install --cask rstudio\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n\n\n\n\nManual download\n\nGo to the RStudio desktop website.\nIf your distro is automatically detected, click on the “Download RStudio Desktop for XXX” link (we have already installed R so can skip step 1 in their guide). If your distro is not automatically detected, scroll down to the bottom to find a suitable installer.\nOnce the download is complete, open the installer and follow the on-screen instructions to complete the installation.\n\n\n\nVia various package managers\nThe version of RStudio available via some sources is very out-of-date. For this reason, I suggest either being cautious and checking it is actually up-to-date, or just downloading it from the above link.\n\n\n\n\n\n\n\n\n\n\nChromeOS\n\n\n\n\n\n\nIf you have installed R locally using the guide in the previous section, it will also guide you how to install RStudio.\nIf you are using a web version of R, there is no need to do anything else.\n\n\n\n\n\n\n\n\n\n\niPadOS\n\n\n\n\n\nThere is no way to install RStudio on your device.\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\nThere is no (simple) way to install RStudio on your device.",
    "crumbs": [
      "Introduction to R",
      "Installation guide"
    ]
  },
  {
    "objectID": "exercises/01_local_r.html#how-to-use-r-on-your-own-computer",
    "href": "exercises/01_local_r.html#how-to-use-r-on-your-own-computer",
    "title": "How to install R and RStudio",
    "section": "How to use R on your own computer",
    "text": "How to use R on your own computer\nQuite simply, in this course you should never open R, you should always open RStudio.\nCheck that everything has worked by launching RStudio. It should detect your R installation automatically, but if not, a window will open asking you to select it. If R does not appear here, I suggest you restart your computer first.\nYou should be met by a scene that looks like this:\n\n\n\nA screenshot of a new RStudio installation on macOS.",
    "crumbs": [
      "Introduction to R",
      "Installation guide"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html",
    "href": "exercises/02_intro_to_r.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a powerful, open-source programming language specifically designed for statistical computing, data analysis, and visualization. For biologists, it offers an invaluable toolkit to analyse experimental results, manage large datasets (e.g., genomic or ecological data), and create publication-quality graphs. Unlike point-and-click software, R allows you to automate repetitive tasks, ensuring efficiency and reproducibility in your research. Its flexibility and extensive capabilities make it a staple in almost all fields within biology, both in academia and in industries. A huge reason for this is that R is free to use, and as such has a global community continually developing new tools and resources tailored to scientific research.\n\n\nR can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button.",
    "crumbs": [
      "Introduction to R",
      "Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#how-do-i-use-r",
    "href": "exercises/02_intro_to_r.html#how-do-i-use-r",
    "title": "Introduction to R",
    "section": "",
    "text": "R can be used in a number of ways. In the next exercise session, we will install R on your computer, along with Rstudio, which is a friendly user interface for R. In this exercise, you will use R in your browser to explore its capabilities.\nNote that once the webpage has loaded, you can edit the code in any of the boxes below (I strongly encourage you to do this!). Press the “Run code” button to run the code you have written. You will learn a lot through experimenting, and you can always reset the code box back to its original state with the “Start over” button.",
    "crumbs": [
      "Introduction to R",
      "Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#r-as-a-calculator",
    "href": "exercises/02_intro_to_r.html#r-as-a-calculator",
    "title": "Introduction to R",
    "section": "R as a calculator",
    "text": "R as a calculator\nR, like most programming languages, can perform arithmetic operations. It follows the order of operations used in mathematics. If you want to review that, you can do so in Chapter 1 of Duthie (2025).\nYou can use the following operators to write equations in R:\n\n+ : Addition\n- : Subtraction\n* : Multiplication\n/ : Division\n^ or ** : Exponentiation\n%% : Modulus (remainder from division)\n%/% : Integer division\n\nUse these to solve the questions below:\nFill in the blank so that the result of the sum is 10. You need to delete the ______ and replace it with a number.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 12.\n\n\n\n\n\n\n\n\n\n\n\n\nFill in the blank so that the result of the sum is 81.",
    "crumbs": [
      "Introduction to R",
      "Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/02_intro_to_r.html#programming-concepts",
    "href": "exercises/02_intro_to_r.html#programming-concepts",
    "title": "Introduction to R",
    "section": "Programming concepts",
    "text": "Programming concepts\nWhile it is not required to be an experienced computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. We will cover these first. You do not need to memorise these things.\n\nObjects\nIn R, data can be stored in objects. An object can be thought of as a container that holds data. You can create an object by assigning a value to a name using the assignment operator &lt;-. In the example below, I assign the value 5 to the object x, and the value 10 to the object y. We can then perform maths or other operations using these objects. Calculate the sum of x and y using + on the line below.\n\n\n\n\n\n\n\n\n\nx &lt;- 5\ny &lt;- 10\nx + y\n\n\n\n\nAdd a third object called z and assign it the value 12. Write a math equation that will output the value 24, using x, y, and z only.\n\n\n\n\n\n\n\n\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- 12\n\ny / x * z\n\n\n\n\nObjects can hold any sort of data in R. It could be a single value like in the above example, multiple values, text, a whole dataset, or a plot.\n\n\nData types\nIn R, data can come in various types, and it’s important to understand these types to manipulate and analyse data effectively. Here are some of the most common data types in R:\n\nNumeric: Represents numbers and can be either integers or floating-point numbers. For example, 42 and 3.14 are numeric values.\nCharacter: Represents text or string data. Character values are enclosed in quotes, such as \"Hello, world!\".\nLogical: Represents boolean values, which can be either TRUE or FALSE.\nFactor: Used to represent categorical data. Factors are useful for storing data that has a fixed number of unique values, such as “Species A” and “Species B” for species ID.\n\n\n\nVectors\nVectors are one of the most basic data structures in R. A vector is a sequence of data elements of the same basic type. We will sometimes directly use vectors in this course, so it will be good to be familiar with them.\n\nCreating Vectors: You can create a vector using the c() function, which stands for “combine” or “concatenate”. For example, here I create 3 vectors, and assign them to different objects:\n\n\n\n\n\n\n\n\n\nAccessing Elements: You can access elements (position) of a vector using square brackets []. For example, to access the second element of character_vector:\n\n\n\n\n\n\n\n\nNote that in R, the first position is [1], not [0] like in some programming languages.\nVector Operations: You can perform operations on vectors. These operations are applied element-wise. For example:\n\n\n\n\n\n\n\n\nNote that every value in the vector gets multiplied and returned.\nVector Length: You can find the length (number of values in it) of a vector using the length() function:\n\n\n\n\n\n\n\n\n\n\nDataframes\nDataframes are like spreadsheets. They have rows and columns, and all columns are the same length. These are the primary way we will represent data in this course.\n\n\n\nspecies\nmass_g\nsex\n\n\n\n\nblue_tit\n9.1\nmale\n\n\nblue_tit\n10.6\nmale\n\n\nsparrow\n27.3\nfemale\n\n\n\nWe will come back to them soon.\n\n\nBoolean and logical operators\nBoolean operators are used to perform logical operations and return boolean values (TRUE or FALSE). We will use them in this course to describe our hypotheses. Here are the most common boolean operators in R:\n\nComparison Operators: These operators compare two values and return a boolean value.\n\n== : Equal to\n!= : Not equal to\n&lt; : Less than\n&gt; : Greater than\n&lt;= : Less than or equal to\n&gt;= : Greater than or equal to\n\n\nFor example, this bit of code should evaluate to TRUE:\n\n\n\n\n\n\n\n\nAnd this should be FALSE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\n100 == 100\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- 48\n\n8 + p == 56\n\n\n\n\n\n\n\n\n\n\n\n\n\nq &lt;- 24\nr &lt;- 88\n\n1q + 65 &gt; r\n\n1\n\nAny number &gt; 64 will work.\n\n\n\n\n\n\nWe can now add in some logical operators:\n\nLogical Operators: These operators are used to combine multiple boolean expressions.\n\n& : Logical AND\n| : Logical OR\n! : Logical NOT\n\n\nFor example, this bit of code should evaluate to TRUE, because both the first part 1 + 3 == 4 and the second part 5 &gt;= 4 is TRUE:\n\n\n\n\n\n\n\n\nWhereas this evaluates to FALSE, because only the first part is TRUE:\n\n\n\n\n\n\n\n\nBut if we change the & to an OR operator |, it evaluates to TRUE because at least one part of it is TRUE:\n\n\n\n\n\n\n\n\nUse the operators above to fill in the blanks below such that the code will evaluate to TRUE:\n\n\n\n\n\n\n\n\n\nfruit_a &lt;- \"apple\"\nfruit_b &lt;- \"banana\"\n\n1(fruit_a != fruit_b) & (1.5 &gt; 1.2)\n\n1\n\nOR | would also work here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfruit_a &lt;- \"apple\"\nfruit_b &lt;- \"banana\"\n\n(fruit_a == fruit_a) | (35 + 12 &gt; 47)\n\n\n\n\n\n\nFunctions\nFunctions perform tasks in R. Functions can take inputs, called arguments, and return outputs. We put the arguments inside the brackets. For example, in R there is a function called mean(). This function’s first argument x should be a vector of numeric data. The function then outputs the mean as a single numeric value. For example, here we assign a vector of tree heights (cm) to an object called trees. We then calculate the mean tree height using the mean() function.\n\n\n\n\n\n\n\n\nNote that if we are going to supply arguments in the order that the function expects them, we do not have to tell the function which object is for each argument. Since mean() expects the first argument to be the vector you want the mean of, we can also write:\n\n\n\n\n\n\n\n\nTo find out what a function can do, and its arguments, use can write ?function_name, and the R helpfile will be returned for that function (e.g., ?mean). These helpfiles can be confusing at first, but the more you use R, the more they will make sense.\nWe will work with functions a lot in this course, so don’t worry if it still seems confusing.\n\n\nPipes\nOne of the final concepts I will introduce is the pipe operator |&gt;. Note that you will often see it written as %&gt;% when searching online. This is for historical reasons (R by default did not have a pipe operator until recently, so people had made their own). |&gt; comes with R by default now, while %&gt;% requires you to load a package called magrittr first (we will cover packages soon).\nPipes allow you to write code in a way that often makes more sense to people, especially non-programmers. To explain, here’s an example. Note that this is not real code, so you cannot run it.\nSay I wanted to run 3 different functions on a dataframe called my_data. The functions are function_1(), function_2(), and function_3(). Imagine function_1() first transforms my data into the right scale, function_2() then performs a statistical test, and function_3() then makes a plot (again, these are not real functions, just for the example).\nI could write that in a few ways. The first way would look like this:\n\n1my_data_1 &lt;- function_1(my_data)\n2my_data_2 &lt;- function_2(my_data_1)\n3my_data_final &lt;- function_3(my_data_2)\n\n\n1\n\nThe original data, my_data, is passed to function_1(), and the result is stored in my_data_1.\n\n2\n\nThe transformed data, my_data_1, is then passed to function_2(), and the result is stored in my_data_2.\n\n3\n\nFinally, the data from my_data_2 is passed to function_3(), and the result is stored in my_data_final.\n\n\n\n\nWhile this method is quite clear to read, it creates a lot of objects that we might not want to do anything with. This is not a huge issue, but could become one if you are working with very large data sets.\nWe could also write it like this:\n\nmy_data_final &lt;- function_3(function_2(function_1(my_data)))\n\nWe can wrap functions within functions to put this whole operation on one line. This gets rid of those extra objects, having only a my_data_final as the output. However, the order in which the functions are written no longer matches the order in which they are run. In the above example, function_1() runs first, then function_2(), then function_3(). But they are written in reverse order when we read it left to right.\nA final method of writing this makes use of pipes |&gt;, and has the best of both approaches:\n\nmy_data_final &lt;- my_data |&gt; function_1() |&gt; function_2() |&gt; function_3()\n\nPipes also allow us to spread our code over multiple lines, and the |&gt; will look for the next bit of code on the next line if nothing comes after it:\n\nmy_data_final &lt;- \n  my_data |&gt; \n  function_1() |&gt; \n  function_2() |&gt; \n  function_3()\n\nAll the above examples have the same my_data_final output, but are just written in different ways. The computer reads them all identically, so the main benefit is how readable your code is.\nIn this course, we will use pipes extensively, along with a set of packages that are designed for this kind of workflow. Below, rewrite the examples to use pipes. You can check the solutions tab to see if you are on the right track:\n\n\n\n\n\n\n\n\n\n1trees |&gt; mean()\n\n1\n\nTake the trees vector, and then pipe|&gt; it into the mean() function.\n\n\n\nThe log() function performs a natural logarithm transformation of the data.\n\n\n\n\n\n\n\n\n\n1trees |&gt;\n  log() |&gt;\n  mean() \n\n1\n\nTake the trees vector, and then pipe|&gt; it into the log() function, then into the mean() function.\n\n\n\n\n\nPackages\nAn R package is a set of functions, data and/or information that someone else has written, that you can first load, then use in your own R code. Packages are written by other R users, and distributed for free via repositories, like The Comprehensive R Archive Network (CRAN).\nR packages are often used to save you time. While all the functions in an R package are written with R, and you could write them again yourself, why bother? If someone else has done it already and shared it, fantastic! In this course, we are going to use two package “families”. They are tidyverse and tidymodels. Note that both start with tidy. Remember from the lecture, that tidy refers to a particular format of data, and these packages all assume your data will be in the format, and will always return data in that format. They are also all built with pipes in mind, and are designed to make complex programming tasks (especially those performed by data scientists, of which biology fits in well) very easy. We will cover these packages in detail soon, but know to use them you need to do two things:\n\nInstall the package. This needs to be done once on your computer, using the install.packages() command. For examples:\n\n\ninstall.packages(\"ggplot2\")\n\nThis will install ggplot2, a package for plotting data. It will install it from CRAN by default, and probably (assuming you are in Sweden) will be downloaded from a server in Umeå.\n\nWe now need to load the package, so that we can access it while we write code. To do that, we use the library() function.\n\n\n1library(ggplot2)\n\n\n1\n\nNote that we no longer require the \" around the package name. But the function would still work if you did include them.\n\n\n\n\nBelow I have written some code that makes a plot using an inbuilt R dataset called iris using the package ggplot2. But if you try to run it, you will get an error. The ggplot2 package has already been installed, so fix the code by loading the ggplot2 package before the code that makes the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n1library(ggplot2)\niris |&gt;\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point()\n\n1\n\nMake sure to load the ggplot2 package before the ggplot() function. Code is always executed top to bottom.\n\n\n\nThat was a lot of concepts in a very short amount of time! Take a well deserved break before the next exercise.",
    "crumbs": [
      "Introduction to R",
      "Getting familiar with R"
    ]
  },
  {
    "objectID": "exercises/03_inference.html",
    "href": "exercises/03_inference.html",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "Open RStudio\n\n\n\nJust like you would any other program on your computer, open RStudio (not R!).\nIt should detect your R installation automatically, but if not, a window will open asking you to select it. If R does not appear here, I suggest you restart your computer first.\n\n\nYou should be met by a scene that looks like this:\n\n\n\nA screenshot of a new RStudio installation on macOS.\n\n\n\n\nBefore we go any further, we need to change some default settings in RStudio. If you know what you are doing and don’t like these suggestions, feel free to ignore them. If this is your first time using RStudio, then please follow them carefully. It will make following along easier.\n\n\n\n\n\n\nChange the following settings\n\n\n\nGo to Tools -&gt; Global Settings, then:\n\nGo to the General tab.\n\nUn-tick “Restore .RData into workspace at startup”\nSet “Save workspace to RData on exit:” to Never.\n\nGo to the Code tab\n\nTick “Use native pipe operator, l&gt; (requires R 4.1+)”\n\nGo to the RMarkdown tab\n\nUn-tick “Show output inline for all R Markdown documents”\n\n\nWhile we are here, if you wanted to change the font size or theme, you can do that in the Appearance tab. RStudio also has screenreader support. You can enable that in the Accessibility tab.\n\n\nGreat, now that’s done, let’s move on.\n\n\n\nRstudio is designed around a four panel layout. Currently you can see three of them. Follow the instructions to open an RMarkdown document, which will also reveal the fourth panel.\n\n\n\n\n\n\nHow to open an RMarkdown document\n\n\n\nGo to File -&gt; New file -&gt; R markdown…\nThis will open a new window and you will be prompted to fill in some details about your new RMarkdown document.\n\nGive your document a title, such as \"BIOC13 Exercise Session 1\".\nWrite your name as the author.\nLeave the rest of the options as default for now, and click OK.\n\n\n\nThis will open the RMarkdown document with some example text and code. If you followed the Getting familiar with R set of execises, you’re already familiar with Rmarkdown documents, as that page behaves exactly like one! They allow you to mix code “chunks” with text and images. Sort of like a powerful word document. We will use RMarkdown documents exclusively in this course.\nYour screen should look like the screenshot below. Note we now have four panels.\n\n\n\nA screenshot of RStudio on macOS with an RMarkdown file open, and the panels labelled.\n\n\n\nSource: This is where we edit code related documents. Anything you want to be able to save should be written here.\nConsole: the console is where R lives. This is where any command you write in the source pane and run will be sent to be executed.\nEnvironments: this panel shows you objects loaded into R. For example, if you were to assign a value to an object (e.g.x &lt;- 1), then it would appear here.\nOutput: this panel has many functions, but is commonly used to navigate files, show plots, show a rendered RMarkdown file or to read the R help documentation.\n\n\n\n\nRMarkdown is a file format for making dynamic documents with R. It combines plain text with embedded R code chunks that are run when the document is rendered, allowing you to include results and your R code directly in the document. This makes it a powerful tool for creating reproducible analyses, which are extremely important in science.\nThe RMarkdown document you opened has some example text and code. An RMarkdown document consists of three main parts:\n\nYAML Header: This section, enclosed by --- at the beginning and end, contains metadata about the document, such as the title, author, date, and output format.\nText: You can write plain text using Markdown syntax to format it. Markdown is a lightweight markup language with plain text formatting syntax, which is easy to read and write.\nCode Chunks: These are sections of R code enclosed by triple backticks and {r}. You can click the green arrow to run all the code in a code chunk, or run each line of code using the Run button, or by using Ctrl+Enter (Windows) or Cmd+Enter (macOS)When the document is rendered, the code is executed, and the results are included in the output.\n\nNotice at the top left of the Source panel, there are two buttons: Source and Visual. These allow you to switch betwee two views of the RMarkdown document. The Source view is what you are looking at, and it is the raw text document. You can also use the Visual view, which allows you to work in a WYSIWYG (what you see is what you get) view, similar to Microsoft Office or other text editors. This “renders” your markdown code for you while you write. It also gives you a series of menus to help you format text, which means you do not need to learn how to write markdown code (although it is extremely simple, and you likely know some already).\n\n\n\n\n\n\nTry switching between the Source and Visual modes\n\n\n\nUse the toggle to see the document in both views. Which ever view you prefer (and you can switch as often as you like), the code part stays the same. It is primarily there for editing the text around your code.\n\n\n\n\n\nI strongly recommend you create a folder where you save all the work you do as part of this section of the course. I also recommend you make this folder in a part of your computer that is not being synced with a cloud service (iCloud, OneDrive, Google Drive, Dropbox, etc). These services can cause issues with RStudio. You can always back up your work at the end of a session.\n\n\n\n\n\n\nMake a folder for the statistics section of BIOC13\n\n\n\nGenerally this is easier outside of RStudio.\n\nMake a folder for the statistics section of BIOC13.\nMake a folder within that folder for this exercise.\n\nFor example, this is exercise 1, so my main folder might be called bioc13, and within that folder I might make a folder called exercise_1.\n\n\nYou should make a new folder for each exercise we do. This will make it easy for you to stay organsied and submit work you do to me for feedback. It also makes your code reproducible by simply sending someone the contents of the folder in question.\nWe now want to set our working directory to this bioc13/exercise_1 folder. A working directory is the directory (folder) in a file system where a user is currently working. It is the default location where all your R code will be executed and where files are read from or written to unless specified otherwise.\n\n\n\n\n\n\nSet your working directory\n\n\n\nWithin RStudio go to Session -&gt; Set working directory -&gt; Choose directory, then navigate to the folder you just made for this exercise.\n\n\nNotice that now in your Output pane, in the files tab, you can see the contents of your folder (which is probably nothing currently). Let’s change that.\n\n\n\nLet’s save this example RMarkdown document that RStudio has made for us. You do that exactly how you might expect.\n\n\n\n\n\n\nSaving a document\n\n\n\nGo to File -&gt; Save, or use the floppy disc icon. Ensure you save it in your working directory with a descriptive name (e.g. exercise_1.Rmd).\n\n\nThe file should have appeared in your Output pane, with the extension .Rmd.\nLet’s move onto working with some data!",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#important-settings",
    "href": "exercises/03_inference.html#important-settings",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "Before we go any further, we need to change some default settings in RStudio. If you know what you are doing and don’t like these suggestions, feel free to ignore them. If this is your first time using RStudio, then please follow them carefully. It will make following along easier.\n\n\n\n\n\n\nChange the following settings\n\n\n\nGo to Tools -&gt; Global Settings, then:\n\nGo to the General tab.\n\nUn-tick “Restore .RData into workspace at startup”\nSet “Save workspace to RData on exit:” to Never.\n\nGo to the Code tab\n\nTick “Use native pipe operator, l&gt; (requires R 4.1+)”\n\nGo to the RMarkdown tab\n\nUn-tick “Show output inline for all R Markdown documents”\n\n\nWhile we are here, if you wanted to change the font size or theme, you can do that in the Appearance tab. RStudio also has screenreader support. You can enable that in the Accessibility tab.\n\n\nGreat, now that’s done, let’s move on.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#rstudio-layout",
    "href": "exercises/03_inference.html#rstudio-layout",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "Rstudio is designed around a four panel layout. Currently you can see three of them. Follow the instructions to open an RMarkdown document, which will also reveal the fourth panel.\n\n\n\n\n\n\nHow to open an RMarkdown document\n\n\n\nGo to File -&gt; New file -&gt; R markdown…\nThis will open a new window and you will be prompted to fill in some details about your new RMarkdown document.\n\nGive your document a title, such as \"BIOC13 Exercise Session 1\".\nWrite your name as the author.\nLeave the rest of the options as default for now, and click OK.\n\n\n\nThis will open the RMarkdown document with some example text and code. If you followed the Getting familiar with R set of execises, you’re already familiar with Rmarkdown documents, as that page behaves exactly like one! They allow you to mix code “chunks” with text and images. Sort of like a powerful word document. We will use RMarkdown documents exclusively in this course.\nYour screen should look like the screenshot below. Note we now have four panels.\n\n\n\nA screenshot of RStudio on macOS with an RMarkdown file open, and the panels labelled.\n\n\n\nSource: This is where we edit code related documents. Anything you want to be able to save should be written here.\nConsole: the console is where R lives. This is where any command you write in the source pane and run will be sent to be executed.\nEnvironments: this panel shows you objects loaded into R. For example, if you were to assign a value to an object (e.g.x &lt;- 1), then it would appear here.\nOutput: this panel has many functions, but is commonly used to navigate files, show plots, show a rendered RMarkdown file or to read the R help documentation.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#rmarkdown",
    "href": "exercises/03_inference.html#rmarkdown",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "RMarkdown is a file format for making dynamic documents with R. It combines plain text with embedded R code chunks that are run when the document is rendered, allowing you to include results and your R code directly in the document. This makes it a powerful tool for creating reproducible analyses, which are extremely important in science.\nThe RMarkdown document you opened has some example text and code. An RMarkdown document consists of three main parts:\n\nYAML Header: This section, enclosed by --- at the beginning and end, contains metadata about the document, such as the title, author, date, and output format.\nText: You can write plain text using Markdown syntax to format it. Markdown is a lightweight markup language with plain text formatting syntax, which is easy to read and write.\nCode Chunks: These are sections of R code enclosed by triple backticks and {r}. You can click the green arrow to run all the code in a code chunk, or run each line of code using the Run button, or by using Ctrl+Enter (Windows) or Cmd+Enter (macOS)When the document is rendered, the code is executed, and the results are included in the output.\n\nNotice at the top left of the Source panel, there are two buttons: Source and Visual. These allow you to switch betwee two views of the RMarkdown document. The Source view is what you are looking at, and it is the raw text document. You can also use the Visual view, which allows you to work in a WYSIWYG (what you see is what you get) view, similar to Microsoft Office or other text editors. This “renders” your markdown code for you while you write. It also gives you a series of menus to help you format text, which means you do not need to learn how to write markdown code (although it is extremely simple, and you likely know some already).\n\n\n\n\n\n\nTry switching between the Source and Visual modes\n\n\n\nUse the toggle to see the document in both views. Which ever view you prefer (and you can switch as often as you like), the code part stays the same. It is primarily there for editing the text around your code.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#working-directory",
    "href": "exercises/03_inference.html#working-directory",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "I strongly recommend you create a folder where you save all the work you do as part of this section of the course. I also recommend you make this folder in a part of your computer that is not being synced with a cloud service (iCloud, OneDrive, Google Drive, Dropbox, etc). These services can cause issues with RStudio. You can always back up your work at the end of a session.\n\n\n\n\n\n\nMake a folder for the statistics section of BIOC13\n\n\n\nGenerally this is easier outside of RStudio.\n\nMake a folder for the statistics section of BIOC13.\nMake a folder within that folder for this exercise.\n\nFor example, this is exercise 1, so my main folder might be called bioc13, and within that folder I might make a folder called exercise_1.\n\n\nYou should make a new folder for each exercise we do. This will make it easy for you to stay organsied and submit work you do to me for feedback. It also makes your code reproducible by simply sending someone the contents of the folder in question.\nWe now want to set our working directory to this bioc13/exercise_1 folder. A working directory is the directory (folder) in a file system where a user is currently working. It is the default location where all your R code will be executed and where files are read from or written to unless specified otherwise.\n\n\n\n\n\n\nSet your working directory\n\n\n\nWithin RStudio go to Session -&gt; Set working directory -&gt; Choose directory, then navigate to the folder you just made for this exercise.\n\n\nNotice that now in your Output pane, in the files tab, you can see the contents of your folder (which is probably nothing currently). Let’s change that.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#saving-your-document",
    "href": "exercises/03_inference.html#saving-your-document",
    "title": "Exercise 1: Data analysis using R",
    "section": "",
    "text": "Let’s save this example RMarkdown document that RStudio has made for us. You do that exactly how you might expect.\n\n\n\n\n\n\nSaving a document\n\n\n\nGo to File -&gt; Save, or use the floppy disc icon. Ensure you save it in your working directory with a descriptive name (e.g. exercise_1.Rmd).\n\n\nThe file should have appeared in your Output pane, with the extension .Rmd.\nLet’s move onto working with some data!",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#background",
    "href": "exercises/03_inference.html#background",
    "title": "Exercise 1: Data analysis using R",
    "section": "Background",
    "text": "Background\nThe dataset describes morphological measurements (lengths, widths of different body parts) of the fly Tephritis conura. This species has specialised to utilise two different host plants (host_plant), Cirsium heterophyllum and C. oleraceum, and formed stable “host races”. Individuals of both host races were collected in both sympatry (where both Cirsium heterophyllum and C. oleraceum host plants co-occur) and allopatry (where only one Cirsium species occurs) (patry) from eight different populations in northern Europe (region) from both sides of the Baltic sea (baltic). Individuals were measured after having been hatched in a common lab environment. One female and one male (sex) from each bud was measured. The authors took magnified photographs of each individual, and of the wings of each individual.\n\n\n\nFigure 1 from Nilsson et al. (2024): Sampling design, host plants, and traits investigated. a. Parallel sampling of allopatric and sympatric populations of the two host races of T. conura flies east and west of the Baltic. CH denotes the C. heterophyllum host race and CO denotes the C. oleraceum host race. b. Size measurements of T. conura. c. The ancestral host plant, C. heterophyllum. d. The derived host plant, C. oleraceum\n\n\nMeasured traits included the length of a wing (wing_length_mm), the width of a wing (wing_width_mm), the amount of the wing that was melanised (melanized_percent), the length of the body (body_length_mm) and the length of the ovipositor (ovipositor_length_mm).",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#getting-everything-setup",
    "href": "exercises/03_inference.html#getting-everything-setup",
    "title": "Exercise 1: Data analysis using R",
    "section": "Getting everything setup",
    "text": "Getting everything setup\nBefore we conduct the analysis, we need to download the dataset and move it to our working directory.\n\n\n\n\n\n\nDownload the dataset\n\n\n\nYou can download the dataset called tephritis_phenotype.csv from here.\n\nOnce downloaded, you should move it to your working directory folder for this exercise before continuing.\n\n\nNext, let’s clean up our document.\n\n\n\n\n\n\nCleaning up the RMarkdown document\n\n\n\nUsing the RMarkdown file we generated at the start (that I called exercise_1.Rmd):\n\nDelete all the code and text that RStudio automatically generated, except the YAML header (the text at the start between the ---). You can do that as you would expect in any other text editor.\n\n\n\nNow we have our blank RMarkdown file, let’s get started.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#installing-r-packages",
    "href": "exercises/03_inference.html#installing-r-packages",
    "title": "Exercise 1: Data analysis using R",
    "section": "Installing R packages",
    "text": "Installing R packages\nIn this exercise, we will use the tidyverse package, and the infer package. To install them you need to use the install.packages() function. Since we only need to do this once per computer, we should run this function directly in the Console panel.\n\n\n\n\n\n\nInstall the R packages on your computer\n\n\n\nType or copy the install function into the console, and press enter to run:\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"infer\")\n\n\nFrom now on, we won’t write things directly in the Console, and instead write code in the RMarkdown document in the Source panel, which we then “Run” and send the Console.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#creating-code-cells",
    "href": "exercises/03_inference.html#creating-code-cells",
    "title": "Exercise 1: Data analysis using R",
    "section": "Creating code cells",
    "text": "Creating code cells\nCode cells are where we write code in an RMarkdown document. This allows use to write normal text outside these sections.\n\n\n\n\n\n\nMake a code cell\n\n\n\nIn your Source panel, in the RMarkdown document, add a R code cell. This is done in different ways depending on if you are using the visual view or the source view:\n\n\n\n\n\n\nHow to make a code cell in Visual view\n\n\n\n\n\nGo to Insert -&gt; Executable Cell -&gt; R.\n\n\n\n\n\n\n\n\n\n\nHow to make a code cell in Source view\n\n\n\n\n\nUse three back-ticks (```) to mark the start and end of a code cell. Additionally at the start, we declare the language used by enclosing it in two curly brackets {r}.\n```{r}\n\n```\n\n\n\nIn both views, you can also use the shortcut Shift-Alt-I or Shift-Command-I.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#loading-r-packages",
    "href": "exercises/03_inference.html#loading-r-packages",
    "title": "Exercise 1: Data analysis using R",
    "section": "Loading R packages",
    "text": "Loading R packages\nAfter installing an R package, we need to tell R that we want to use the package in this document. We use the library() function to do that.\nR code should always be executed “top to bottom”, so this bit of code should come right at the start.\n\n\n\n\n\n\nTell R that we want to use the packages we just installed\n\n\n\nInside that code cell you just made, use the library() function to load the tidyverse and infer packages:\n\nlibrary(tidyverse)\nlibrary(infer)\n\nThen run the code. (To run code in the Source panel, you can click on the line you want to run, and then press the “Run” button. Or you can also use the keyboard shortcut Ctrl+Enter or Cmd+Return.)\n\n\nIf that worked, you will get a message that reads something similar to:\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNot all packages produce a message when they are loaded (for example, infer did not).",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#writing-text-alongside-code",
    "href": "exercises/03_inference.html#writing-text-alongside-code",
    "title": "Exercise 1: Data analysis using R",
    "section": "Writing text alongside code",
    "text": "Writing text alongside code\nAnywhere outside a code cell you can write normal text. In this course, you might find it helpful to write yourself notes alongside your code, so that you can come back to your notes during other exercises, or later in your studies.\nAlong side normal text, you can structure an RMarkdown document using headings.\n\n\n\n\n\n\nVisual view\n\n\n\n\n\nChange the type of text you are typing in the menu at the top:\n\n\n\n\n\n\n\n\n\n\nSource view\n\n\n\n\n\nUse #s to indicate the level of the heading:\n# Heading level 1\n## Heading level 2\n### Heading level 3\n\n\n\nI leave it up to you to decide how and when to use headings and text.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#importing-data-into-r",
    "href": "exercises/03_inference.html#importing-data-into-r",
    "title": "Exercise 1: Data analysis using R",
    "section": "Importing data into R",
    "text": "Importing data into R\nWe will now load the tephritis_phenotype.csv data file that you downloaded earlier. A .csv file is a file that stores information in a table-like format with Comma Separated Values. A typical .csv file will look something like this:\nspecies,height,n_flowers\npersica,1.2,12\npersica,1.5,18\nbanksiae,2.4,3\nbanksiae,1.7,8\n.csv files are especially suited to storing data that can be used across a wide variety of programmes, as everything is stored as plain text.\n\n\n\n\n\n\nLoad the data into R\n\n\n\nWe will load the tephritis_phenotype.csv data file using the read_csv() function and assign it to an object named tephritis_data. To do that, first make a new code cell, then within it write:\n\n1tephritis_data &lt;- read_csv(\"tephritis_phenotype.csv\")\n\n\n1\n\nBe sure to use quote marks around the file name.\n\n\n\n\n\n\nIf that worked, you should get the following message with some information about the data:\n\n\nRows: 579 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): region, host_plant, patry, sex, baltic\ndbl (5): body_length_mm, ovipositor_length_mm, wing_length_mm, wing_width_mm...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis has loaded a copy of the data from tephritis_phenotype.csv into R. Notice that the object tephritis_data has also appeared in the Environment panel.\n\n\n\n\n\n\n\nView the data in R\n\n\n\nTo view the data, click on the object tephritis_data in the Environment panel with your mouse.\nThis allows you to view the dataset like you would in a spreadsheet software like Microsoft Excel. Note however, there is no way to edit the data in this view. This is by design. Any editing of the data needs to be done in the RMarkdown document with code. That way, you can keep a record of any edits you make, without touching the original data file.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#exploring-data",
    "href": "exercises/03_inference.html#exploring-data",
    "title": "Exercise 1: Data analysis using R",
    "section": "Exploring data",
    "text": "Exploring data\nLet’s use a few more functions to get a better understanding of the dataset. You may remember these from Exercise 2.\n\n\n\n\n\n\nPrint the data to the console\n\n\n\nMake a new code cell, and write the following:\n\n1print(tephritis_data)\n\n\n1\n\nWe can also just simply write tephritis_data without the print statement, and we would get the same output.\n\n\n\n\n\n\nLet’s unpack what has appeared in your console:\n\nThe first line of the output is telling us what sort of data is in the object. In this case, its a tibble, a way of storing data in a table/spreadsheet format.\nThat same line tells us the number of rows (583) and number of columns (10) in the table.\nThe next line tell us the variable types.\nThen the first 10 rows of the dataframe have been printed, along with the column (variable) names at the top.\nBelow that, we get two important pieces of information, denoted by the small ℹ symbol:\n\nThe first ℹ tells us how many rows are not being shown here. Since by default 10 are shown, \\(583-10=573\\).\nThe second ℹ tells us how many columns (variables) are not being shown here, as there was not enough room to print them.\n\nWe can also see that some rows have NA values (not applicable). This is the symbol R uses to say no data present.\n\nLet’s use a few other ways of viewing our data in the console:\n\n\n\n\n\n\nTake a glimpse at the data\n\n\n\nMake a new code cell, and write the following:\n\nglimpse(tephritis_data)\n\n\nglimpse() transposes the dataframe, with columns now running down the page. This view means we can see all the variables.\n\n\n\nYou can also use summary() to calculate some useful summary statistics of the dataset as a whole:\n\n\n\n\n\n\nCalculate some summary statistics of your dataset\n\n\n\nMake a new code cell, and write the following:\n\nsummary(tephritis_data)\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nAnswer the following questions in text in your RMarkdown document. Use what you have learned from exploring the data so far, and the background to the study:\n\nWhat is the unit of observation in this dataset? In other words, what does each row represent?\nWhat populations (statistical use of the word) could we make inferences about using this data?\nAre there any NA values in the dataset? In which variable(s) and why might this be?",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  },
  {
    "objectID": "exercises/03_inference.html#answering-a-research-question",
    "href": "exercises/03_inference.html#answering-a-research-question",
    "title": "Exercise 1: Data analysis using R",
    "section": "Answering a research question",
    "text": "Answering a research question\nOne of the questions that Nilsson et al. (2022) were interested in was if there has been any morphological (size of body parts) divergence between the host races of these flies. In other words, do flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in some predictable way?\nLet’s use the variable ovipositor_length_mm to explore this research question.\n\nFiltering the dataset\nFirst, we should filter() our dataset to only contain females (as only females have an ovipositor). filter() is a function that let’s us write conditional statements that only allow rows that meet those conditions to “filter” through. For example, we can use filter() to only allow rows where sex == \"female\" to filter through, thereby creating a new dataset of just female flies.\n\n\n\n\n\n\nFilter the dataset\n\n\n\nMake a new code cell, and write the following:\n\n1female_data &lt;-\n  tephritis_data |&gt; \n2  filter(sex == \"female\")\n\n\n1\n\nI assigned the new dataset to a new object, called female_data.\n\n2\n\nInside the filter() function, I say which rows should be allowed through the filter.\n\n\n\n\n\n\nNow we have the rows we are interested in, let’s move on.\n\n\nExploratory plot\nOften before we start any formal statistics, we want to plot our data.\nR has a built in method to make plots, but here we will use a different approach. Instead we will use ggplot2, a plotting package that is installed with tidyverse. ggplot2 provides a clear and simple way to customise your plots. It is based in a data visualisation theory known as the grammer of graphics (Wilkinson 2013).\n\n\n\n\n\n\nThe grammer of graphics\n\n\n\nThe grammer of graphics gives us a way to describe any plot.\nA ggplot2 plot has three essential components:\n\ndata: the dataset that contains the variables you want to plot\ngeom: the geometric object you want to use to display your data (e.g. a point, a line, a bar).\naes: aesthetic attributes that you want to map to your geometric object. For example, the x and y location of a point geometry could be mapped to two variables in your dataset, and the colour of those points could be mapped to a third.\n\nggplot2 uses a layered approach to the grammer of graphics. This makes it very easy to start contructing plots by putting together a “recipe” step-by-step. Let’s walk through an example.\nIn our case, we want to plot ovipositor_length_mm for each host_plant group. One example might be a boxplot:\n\n\n\nA description of the data a boxplot shows\n\n\n\nggplot( \n1  data = female_data,\n2  mapping = aes(x = host_plant, y = ovipositor_length_mm)\n3  ) +\n4  geom_boxplot()\n\n\n1\n\nInside the ggplot() function, I specify the dataset as female_data\n\n2\n\nI map the host_plant column to the x axis aesthetic and the ovipositor_length_mm to the y axis aesthetic.\n\n3\n\nTo add layers to a ggplot() object, we can use a +\n\n4\n\nI add a boxplot geometry, that will use the aesthetics I specified before.\n\n\n\n\nCopy the code into a new code cell and run it.\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhat does the graph tell you? Is there a difference between the host races? Write your answer in your RMarkdown document.\n\n\n\n\n\nCalculating the observed statistic\nOur research question is:\n\nDo flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in their ovipositor_length_mm?\n\nThe question concerns a difference in a continuous variable between two groups (host_plant). Let’s start by exploring if there is a difference in the central tendancy of ovipositor_length_mm in the two groups. That is, does average ovipositor_length_mm differ between them?\nA suitable statistic that captures our question could be a difference in means.\n\\[\n\\bar{x}_{\\text{heterophyllum}} - \\bar{x}_{\\text{oleraceum}}\n\\]\nWe are going to do that using the infer package we loaded at the start.\nTo use infer to calculate an observed statistic, we use the approach we covered in the lecture:\n\nIn code, that looks like this:\n\n4obs_stat &lt;-\n1  female_data |&gt;\n2  specify(response = ovipositor_length_mm, explanatory = host_plant) |&gt;\n3  calculate(stat = \"diff in means\", order = c(\"heterophyllum\", \"oleraceum\"))\n\n\n1\n\nUsing the dataset we just made, we pipe |&gt; it into the next line.\n\n2\n\nWe specify() which columns we are interested in, and which is our response variable, and which is our explanatory variable. In this case, we want to explain ovipositor_length_mm using host_plant, and express that as a \"diff in means\".\n\n3\n\nWe calculate() our chosen statisitc \"diff in means\", and we say that the subtraction should be \"heterophyllum\" minus \"oleraceum\".\n\n4\n\nWe assign this to a new object called obs_stat.\n\n\n\n\n\n\n\n\n\n\nCalculate the observed test statistic\n\n\n\nUse the code above in a new code cell to calculate the observed statistic.\nTo see your observed statistic, simply print it by writing the name of the object.\n\nobs_stat\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nDescribe in words what this observed statistic tells us. Is there a difference in mean ovipositor length? If so, which host race is bigger, and by how much?\nDoes it make sense given the graph you made earlier?\n\nWrite your answer in your RMarkdown document.\n\n\n\n\nQuantifying uncertainty\nIf we took another sample (that is, if we repeated the field work that Nilsson et al. (2022) did), it is unlikely that we would get exactly the same observed statistic, just due to chance. We want to quantify this effect. In this exercise, we will use a 95% confidence interval to do that.\n\n\n\nA general approach to bootstrapping confidence intervals.\n\n\nWe have already calculated our observed statistic, so let’s generate a sampling distribution using bootstrapping.\nRecall from the lecture that a bootstrap sample is generated from the original dataset by resampling (randomly selecting rows) it with replacement (we can select the same row more than once). To complete one bootstrap sample, we resample with replacement until we have the same number of rows of data that were in our original dataset.\nWe then calculate our observed statistic using the bootstrap sample. This can then be repeated many times to construct a sampling distribution, which show the range of statistics we think it would be possible to observe, if we had actually sampled our population again.\nTo do that in code, we write the following:\n\n2sampling_dist &lt;-\n  female_data |&gt; \n  specify(response = ovipositor_length_mm, explanatory = host_plant) |&gt;\n1  generate(reps = 10000, type = \"bootstrap\") |&gt;\n  calculate(stat = \"diff in means\", order = c(\"heterophyllum\", \"oleraceum\"))\n\n\n1\n\nNotice how this is almost identical to the code we used to get the observed statistic, but we have one extra step, where we generate 10000 bootstrapped datasets, then calculate the diff in means for all of them.\n\n2\n\nWe assign this to a new object, called sampling_dist\n\n\n\n\n\n\n\n\n\n\nSimulate and visualize a sampling distribution\n\n\n\nUse the code above in a new code cell to get a bootstrap sampling distribution.\nAgain we can print it by just writing its name:\n\nsampling_dist\n\ninfer has a helpful function to quickly see the distribution:\n\nvisualize(sampling_dist)\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhat does the output of visualize(sampling_dist) show? How would you describe it to a friend who is not in this class?\n\nWrite your answer in your RMarkdown document.\n\n\n\nConfidence intervals\nWe can use the percentile method to calculate a confidence interval. To do that we take the middle 95% of the bootstrapped sampling distribution. Again, infer has a helpful function to do this for us.\n\n\n\n\n\n\nCalculate a 95% confidence interval\n\n\n\nUse the code below in a new code cell to calculate your confidence interval.\n\nconf_int &lt;-\n  get_confidence_interval(sampling_dist, level = 0.95, type = \"percentile\")\n\nAgain, print the object to see the confidence intervals:\n\nconf_int\n\nWe can also visualise the confidence interval on our sampling distribution:\n\nvisualize(sampling_dist) +\n  shade_confidence_interval(endpoints = conf_int)\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nUsing our original research question:\n\nDo flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in their ovipositor_length_mm?\n\nWrite a statement to address our original research question using your observed statistic and confidence intervals.\n\n\n\n\n\nHypothesis testing\nWhile our confidence interval is one way to address this question, we can also address it through “null hypothesis testing”. A null hypothesis test tests if flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in their ovipositor_length_mm more so than is expected by chance.\n\n\n\n\n\nTo do that we need to construct a null and alternative hypothesis.\n\n\n\n\n\n\nConstructing a null hypothesis\n\n\n\nA null hypothesis posits that the explanatory variable we test does NOT affect our data. We then test if our data is sufficiently different from the null hypothesis such that we can reject it.\nA null hypothesis does not have be defined by a “zero effect”.\n\n\n\n\n\n\n\n\nConstructing an alternative hypothesis\n\n\n\nOpposite of the Null hypothesis (the explanatory variable affects our data). We normally think in terms of an alternative hypothesis\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nUsing our original research question:\n\nDo flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in their ovipositor_length_mm?\n\nWrite a null and alternative hypotheses in your document in text.\n\n\n\nGenerating data assuming the null hypothesis is true\nAs we did in the lecture, we will use a shuffling or permute method of creating a sampling distribution compatible with our null hypothesis.\nTo do that with infer, the code looks like this:\n\n3null_dist &lt;-\n  female_data |&gt; \n  specify(response = ovipositor_length_mm, explanatory = host_plant) |&gt;\n1  hypothesise(null = \"independence\") |&gt;\n2  generate(reps = 10000, type = \"permute\") |&gt;\n  calculate(stat = \"diff in means\", order = c(\"heterophyllum\", \"oleraceum\"))\n\n\n1\n\nAgain, the code looks very similar, but now we have added an extra hypothesise() step, where we declare our null hypothesis to be that the response and explanatory variables are independent of each other.\n\n2\n\nWe generate 10000 permutated datasets under this hypothesis, and calculate the statistic for each dataset\n\n3\n\nSave as an object called null_dist\n\n\n\n\n\n\n\n\n\n\nSimulate and visualize a null distribution\n\n\n\nUse the code above in a new code cell to simulate a null distribution.\nYou can print by writing the name:\n\nnull_dist\n\nThe same command as we used before for the bootstrap sampling distribution can be used to visualise your null distribution. Use visualise() to show your null distribution.\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nAnswer these questions in your document:\n\nWhat is shown when you visualise() the null distribution? What does that graph represent?\n\nAnswer in a way that an ecology student who is not in this class could understand.\n\n\n\n\nVisualising and calculating a p-value\nRecall that we want to answer the following question:\n\nAre flies that use \"heterophyllum\" as a host_plant and flies that use \"oleraceum\" as a host_plant differ in their ovipositor_length_mm more so than is expected by chance?\n\nTo help answer it, we can calculate and visualise a p-value, which is a probability of observing our original statistic, or one more extreme, assuming the null hypothesis is true.\nUsing our null distribution, we can take our definition above, and simple count the number of times we found an absolute difference in mean as great (or greater than) our observed test statistic, and divide that by the total number of statistics in our null distribution:\n\\[\np = \\frac{\\text{Number of times } |\\text{null statistic}| \\geq |\\text{observed statistic}|}{\\text{Total number of null statistics}}\n\\]\nThis is a two-sided p-value.\n\n\n\n\n\n\nCalculate and visualise the p-value\n\n\n\nIn a new code cell, calculate the p-value using the code below:\n\nnull_dist |&gt;\n1  get_p_value(obs_stat, direction = \"two-sided\")\n\n\n1\n\nSince we did not have a reason to think one particular host race would be bigger, we use a two-sided hypothesis test.\n\n\n\n\nWe can also visualise the p-value on the null distribution, to get a better idea of where that value comes from:\n\nvisualise(null_dist) +\n  shade_p_value(obs_stat, direction = \"two-sided\")\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nWith reference to your null and alternative hypotheses:\n\nDo you reject or fail to reject your null hypothesis?\nDoes your conclusion align with what you found using the confidence interval approach?\nSummarise the difference in the type of question being answered when performing a null hypothesis test, vs using a confidence interval.\n\nWhen you get to this stage, let the teacher know so that we can discuss your findings!\n\n\nEnd of exercise.",
    "crumbs": [
      "Introduction to inference (Day 1)",
      "Exercises"
    ]
  }
]